module ria.lang.compiler.doc;

import java.net.URLEncoder;
load ria.lang.compiler.showtype;

let formatType template =
   (var cur = '';
    var big = false;
    var depth = 0;
    var st _ _ = '';
    let leftArrow = template.escape '<';
    let rightArrow = template.escape '>';

    let format indent t =
       (old = cur;
        depth := depth + 1;

        let enclose s t =
            case t of
            Function _: "(${s})";
            Variant (_ :+ _): "(${s})";
            _: s;
            end;

        let dataType l variant =
           (let types = [:];
            var flag = false;
            for l do {name, type}:
                big := false;
                var str = format indent type;
                if variant then
                    str := enclose str type
                end;
                types[name] := str;
                flag := flag or big
            done;
            let titles = [:];
            setHashDefault titles $'';
            let fieldDesc f =
               (let fn = f.name;
                var description = f.description;
                var group = '';
                let m = like '[\s*]*Group: +(\w+)(?: +\(([^\n)]*)\))?\s*\*?'
                    description ();
                if not empty? m then
                    description := strRight description (strLength m[0]);
                    group := m[1];
                    if m[2] != '' then
                        titles[group] := m[2]
                    end
                end;
                let nameStr = if variant or fn =~ '^\w' then fn else "(${fn})" end;
                f is typeitem!<type> with { typeStr = types[fn], nameStr,
                         description, group, var groupTitle = ''});
            let sortKey f = [f.group, f.nameStr];
            let fields = sortBy (on (<) sortKey) (map fieldDesc l);
            for fields do f: f.groupTitle := titles[f.group] done;
            let docs = not empty? (find ((!= '') . (.description)) fields);
            big := docs or flag or length l >= 3;
            cur := if variant then 'variant' else 'struct' end;
            { big, docs, fields = array fields, top = depth == 1 });

        let other s =
            if cur != '' then
                cur := '';
                template.other s
            else
                s
            end;

        let s = case t of
            Struct  l: template.struct (dataType l false);
            Variant l: template.variant (dataType l true);

            Function l:
                var flag = false;
                let fields = array [];
                for l do type:
                    big := false;
                    push fields (enclose (format indent type) type);
                    flag := flag or big
                done;
                big := flag or length fields > 4;
                template.function {big, docs = false, fields, top = depth == 1};

            Parametric {type, params}:
                let res = strJoin ', ' (map (format indent) params);
                other (type ^ leftArrow ^ res ^ rightArrow);

            Alias {type, alias}:
                other "(${template.alias alias (format indent type)})";

            _:
                other (st indent t);
            end;
        depth := depth - 1;
        cur := old;
        s);

    st := showType (ShowType format :+ template.options);
    format);

let (@) = strReplace '<' '&lt;' . strReplace '>' '&gt;' . strReplace '&' '&amp;';

let parseDoc' doc =
   (let mticks = matchAll '`([^`]*)`|("(?:[^"]|\\.)*")'
        (_ s = (s = s[1] ^ s[2];
                if s != '' then "<var>${s}</var>" else: '`'));
    let ticks = strJoin '' . mticks id;
    let listState to pattern line =
        case pattern line () of
        [_, arg, text]:
            push to {arg, text = array [ticks text]};
        _:
            if empty? to then
                push to {arg = "???", text = array [line]}
            else
                push to[length to - 1].text (ticks line)
            end
        end;
    var code = false;
    let withCode to line =
       (was = code;
        code := strStarts? line ':';
        if not was and code then
            push to '<pre>'
        elif was and not code then
            push to '</pre>'
        end;
        push to if code then strRight line 1 else ticks line end);

    let doc = (substAll "(?:^|\n[ \\t]+)\\*" "\n" doc@) |> strSplit "\n" |> map strTrim;
    let about = array [];
    let args = array [];
    let description = array [];
    let exceptions = array [];
    let examples = array [];
    let seeAlso = array [];
    let notes = array [];
    var prev = '';
    var state = push about;

    for doc do line:
        if prev == '' then
            case line of
            'Arguments:': state := listState args
                            (like '^(\w++|\(\))\s++-(?:\s++(.*))?$');
            'Description:': state := withCode description;
            'Exceptions:': state := listState exceptions
                            (like '^([\w.]++)\s++-(?:\s++(.*))?$');
            'Examples:': state := withCode examples;
            'See also:': state := push seeAlso;
            'Notes:': state := withCode notes;
            _: state line
            end
        else
            state line
        end;
        prev := line
    done;

    let arg_list = map (.arg) args;
    let join = map (strJoin "\n") . filter ((not) . ('' ==) . head)
                              . groupBy (on (==) ('' ==));
    let arg_set = hash arg_list;
    map strCapitalize arg_list |> hash |> insertHash arg_set;
    let mark_arg a =
        if a[0] in arg_set then "<var>${a[0]}</var>" else a[0] end;
    let mark_args = strJoin '' . mticks (strJoin '' .  matchAll '\w+' mark_arg id);
    let lines = strJoin '<p></p>';
    let show pre post f v = if not empty? v then "${pre}${f v}${post}" end;
    let text what = show "<p>${what}</p>" '' (lines . join);
    let descr = if not all empty? [args, exceptions] or
              not all empty? [about, description, examples, seeAlso, notes] then
        state ''; // </pre> if needed
        let arg {arg, text} =
            "<tr><td><var>${arg}</var><td>-<td class=arg>${lines (join text)}";

        "<div class=\"doc\">${lines (map mark_args (join about))}\
        "${show '<table class="args">' '</table>' (strJoin '' . map arg) args}\
        "${show '<p>Exceptions thrown</p><table class="args">'
                '</table>' (strJoin '' . map arg) exceptions}\
        "${text 'Description' description}\
        "${text 'Examples' examples}\
        "${text 'See also' seeAlso}\
        "${text 'Notes' notes}</div>"
    end;
    {descr, args = arg_list, raw_doc = doc});

let parseDoc doc =
    if doc != '' then
        parseDoc' doc
    else
        {descr = undef_str, args = [], raw_doc = []}
    end;

let formatDoc _ doc =
    (parseDoc doc).descr;

let html_prelude =
'<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd">
<html><meta http-equiv="Content-Type" content="text/html;charset=utf-8" >
<meta http-equiv="content-language" content="en" />
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css">
';

let css_styles =
"<style type=\"text/css\">

 .main { background: white; line-height: 130%; }
 .type { background: white; font-size: 12pt; }
 .sn { font: 13pt monospace }
 .vn { font-size: 13pt }
 .other { background: #cccccc; display: inline; }
 .field { padding: 1.5pt }
 .wdoc { padding-top: 0.5em; padding-bottom: 0.4em; }
 var { font: 11pt monospace }
 .args { padding-left: 1.4em }
 .args tr td { vertical-align: text-top }
 td.arg { width: 100% }
 .box { border: 1px solid lightgrey;
     padding: 1px 0.1em 1pt;
     margin: 1px 1pt 0pt;
     display: inline-block;
     vertical-align: top; }
 .module { color: #000080 }
 .group { font: 16pt sans-serif; border-bottom: solid black 1px;
          padding: 0px; margin: 0.5em 0px; text-align: center }
 em { color: #000080; font: bold 13pt sans-serif }
 .function { background: #ffddff }
 .struct { background: #ffffff }
 .variant { background: #c7c7ff }
 .ft { padding-left: 0em }
 .doc { background: #ffffcc;
     padding: 0.5em 0.5em 0.5em 2em;
     font-size: 12pt; }
 .contents { background: #dddddd; padding: 0.5em; font-size: 10pt }
 .contents a { text-decoration: none }
 .contents a:hover { text-decoration: underline }
 .doc p { margin: 0.6em 0px 1px; font-weight: bold }
 .doc pre { background: #ffffc8;
     border: 1px dashed black;
     margin: 0.3em 1.5em 0.3em 0px;
     padding: 0.3em; overflow: auto }
 </style>";

let html_page {name, descr, moduleType, typedefs} =
"${html_prelude}${css_styles}<title>${name@}</title>
<body>
<div class=\"main\">
<h2><span class=module>module</span> ${name@}</h2>
${descr}<p>${typedefs}
<h3>Module signature</h3>
<div class=\"type\">${moduleType}</div>
</div>
</body></html>";

let complexType what before sep after f {big, docs, top, fields} =
   (style = if docs then '"field wdoc"' else 'field' end;
    contents = array [];
    var lastGroup = '';
    str sep field' =
       ({descr, name, type, group, groupTitle, mutable} = f sep field';
        var s = strJoin '' type;
        if groupTitle != '' and groupTitle != lastGroup then
            if name != '' then
                if not empty? contents then push contents "<br>" end;
                push contents "<a href=\"#${group}\">${groupTitle@}</a>: "
            end;
            s := "<div id=${group} class=group>${groupTitle@}</div>${s}";
            lastGroup := groupTitle
        end;
        if big then
            idattr = if name != '' then
                         ref = URLEncoder::encode(name, 'UTF-8');
                         push contents "<a href=\"#${ref}\">${name}</a>";
                         "id=\"${name@}\" "
                     end;
            "<div ${idattr}class=${style}>${s}${descr}</div>\n"
        else
            s
        end);
    last = pop fields;
    var fields = map' (str sep) fields ++ [str '' last];
    contents =
        if big and length fields > 10 and not empty? contents then
            "<div class=contents>${strJoin ' ' contents}</div>"
        end;
    if big then
        block = if top then ' style="display: block; margin: 2pt"' end;
        fields := "<div class=\"box ${what}\"${block}>"
                    :+ contents :+ fields ++ ["</div>"]
    end;
    strJoin '' (before :+ fields ++ [after]));

let to_html = formatType {
    struct = complexType 'struct' '<em>{</em>' ', ' '<em>}</em>' do sep f:
        {descr, args} = parseDoc f.description;
        args = map (_ arg = " <var>${arg}</var>") args;

        type = flatten [[if f.mutable then '<em>var </em>' else '<em>let </em>' end,
                        '<span class=sn>', f.tag, (f.nameStr@), '</span>'],
                       args, ['<em> is </em>', f.typeStr, sep]];
        {descr, type, name = f.name,
         group = f.group, groupTitle = f.groupTitle, mutable = f.mutable}
    done,
    variant = complexType 'variant' '' ' | ' '' do sep m:
        {descr} = parseDoc m.description;
        type = ['<span class=vn>', m.name, m.tag, '</span> ', m.typeStr, sep];
        {descr, type, name = '', group = m.group, groupTitle = m.groupTitle, mutable = m.mutable}
    done,
    function = complexType 'function' '' ' &rarr; ' ''
                           (_ sep t = {descr = '', type = [t, sep], name = '',
                                       group = '', groupTitle = '', mutable = false}),
    alias alias type = "${alias}<em> is </em>${type}",
    other descr = "<div class=\"other\">${descr}</div>",
    escape s =
        case s of
        '<': '<tt>&lt;</tt>';
        '>': '<tt>&gt;</tt>';
        _: (s@)
        end,
    options = [FormatDoc formatDoc]
};

let typedef_param param =
    if not empty? param then "<${strJoin ', ' param}>" end;

let typedef_html {name, type, param} =
    "<div class=\"type\"><em>typedef</em> \
    "${name@}${typedef_param param@} = ${to_html '' type}</div>";

let modules = [:];

/**
 * Group: doc (Documentation)
 * Documents a module
 */
let moduleDoc doc_dir {type, name, doc, typedefs, skipped} =
   ({descr, raw_doc} = parseDoc doc;
    if not skipped then
        moduleType = to_html '' type;
        page = html_page {
            name, descr, moduleType,
            typedefs = strJoin '<p>' (map typedef_html typedefs)
        };
        writeFile "${doc_dir}/${name}.html" utf8 (`putLines` [page])
    end;
    modules[name] := head ((splitBy (!= '') raw_doc).snd ++ [undef_str]));

/**
 * Group: doc
 * Creates an index for the modules
 */
let docIndex doc_dir =
   (item name =
        "<dt><a href=\"${name}.html\">${name}</a><dd>${modules[name]}";
    writeFile "${doc_dir}/index.html" utf8 (`putLines`
       ["${html_prelude}<title>Module index</title>\n\
        "<style type=\"text/css\">DD {margin-bottom: 0.8em}</style>\n\
        "<body><div><big>Module index</big><dl>\
        "${keys modules |> sort |> map item |> strJoin "\n"}\
        "</dl></div></body></html>"]));

{moduleDoc, docIndex}